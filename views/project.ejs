<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script>
            if (window.innerWidth <= 768) {
                document.write('<link rel="stylesheet" href="/stylesheets/mobile.css">');
            } else {
                document.write('<link rel="stylesheet" href="/stylesheets/desktop.css">');
            }
        </script>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <title>Document</title>
    </head>    
<body>
    <div class="container">
        <div class="sidebar">
            <img src="/images/hayabusa2.png" alt="icon">
            <% if(userID) { %>
                <ul>
                    <a href="/"><li>ホーム</li></a>
                    <a href="/dashboard"><li>ダッシュボード</li></a>
                    <a href="/project/projects"><li>プロジェクト一覧</li></a>
                    <a href="/task/tasks"><li>タスク一覧</li></a>
                    <a href="/profile?uid=<%= userID %>"><li>マイページ</li></a>
                    <a href="/login/logout"><li>ログアウト</li></a>
                </ul>
            <% }else { %>
                <ul>
                    <a href="/"><li>ホーム</li></a>
                    <a href="/login"><li>ログイン</li></a>
                    <a href="/login/create"><li>アカウント作成</li></a>
                </ul>
            <% } %>
        </div>

        <div class="content">
            <div class="breadcrumb">
                <a href="/dashboard">ダッシュボード</a>
                <span>></span>
                <span><%= projectData[0].name %></span>
            </div>

            <div class="section">
                <h2 class="project-heading"><%= projectData[0].name %></h2>
                <p><%= projectData[0].description %></p>
            </div>

            <div class="section">
                <h2 class="task-heading">タスク一覧</h2>
                <% if(taskData && taskData.length > 0) { %>
                    <table id="taskTable">
                        <thead>
                        <tr>
                            <th>タスク名</th>
                            <th>概要</th>
                            <th onclick="sortTasksByDueDate()" style="cursor: pointer;">期限 <span id="sortArrow">↑</span></th>
                            <th>責任者
                                <div class="selector">
                                    <select id="personFilter">
                                        <option value="all">All</option>
                                        <% users.forEach(user_row => { %>
                                            <option value="<%= user_row.userID %>"><%= user_row.name %></option>
                                        <% }) %>
                                    </select>
                                </div>
                            </th>
                            <th>進行度
                                <div class="selector">
                                    <select id="statusFilter">
                                        <option value="all">All</option>
                                        <option value="-1">開始前</option>
                                        <option value="0">進行中</option>
                                        <option value="1">完了</option>
                                    </select>
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        <% taskData.forEach(row => { %>
                            <tr>
                                <td><a href="/task?tid=<%= row.taskID %>"><%= row.name %></a></td>
                                <td><%= row.description %></td>
                                <td><%= row.due %></td>
                                <td>
                                    <% users.forEach(user_row => { %>
                                        <%= user_row.userID === row.responsible ? user_row.name : '' %>
                                    <% }) %>
                                    <div hidden><%= row.responsible %></div>
                                </td>
                                <td data-completion="<%= row.completion %>">
                                    <div class="selector">
                                        <select name="progress" id="<%= row.taskID %>_progress_selector">
                                            <option value="-1" <%= row.completion === -1 ? 'selected' : ''%>>開始前</option>
                                            <option value="0" <%= row.completion === 0 ? 'selected' : ''%>>進行中</option>
                                            <option value="1" <%= row.completion === 1 ? 'selected' : ''%>>完了</option>
                                        </select>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                        </tbody>
                    </table>
                    <form action="/project/create-task" method="get"><button type="submit">タスクを作成</button></form>
                    <div id="chart_div"></div>
                <% } else { %>
                    <p>表示するタスクがありません</p>
                    <form action="/project/create-task" method="get"><button type="submit">タスクを作成</button></form>
                <% } %>
            </div>
        </div>
    </div>
</body>


    <script>
        let isAsc = true; // Sort order flag

        function filterTasks() {
            let statusFilterValue = document.getElementById('statusFilter').value;
            let personFilterValue = document.getElementById('personFilter').value;
            let table = document.getElementById('taskTable');
            let rows = table.getElementsByTagName('tr');

            for (let i = 1; i < rows.length; i++) {
                let completionValue = rows[i].getElementsByTagName('td')[4].dataset.completion;
                let personValue = rows[i].getElementsByTagName('td')[3].querySelector('div').innerText.trim();

                if ((statusFilterValue === 'all' || statusFilterValue === completionValue) &&
                    (personFilterValue === 'all' || personFilterValue === personValue)) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }

        function sortTasksByDueDate() {
            let table = document.getElementById('taskTable').getElementsByTagName('tbody')[0];
            let rows = Array.from(table.getElementsByTagName('tr'));

            rows.sort(function(a, b) {
                let dateA = new Date(a.getElementsByTagName('td')[2].innerText);
                let dateB = new Date(b.getElementsByTagName('td')[2].innerText);
                return isAsc ? dateA - dateB : dateB - dateA;
            });

            // Toggle the sort order
            isAsc = !isAsc;

            // Update the sort arrow based on the current sort order
            document.getElementById('sortArrow').textContent = isAsc ? '↑' : '↓';

            rows.forEach(row => table.appendChild(row)); // Reorder rows
        }

        document.addEventListener("DOMContentLoaded", function() {
            document.getElementById('statusFilter').addEventListener('change', filterTasks);
            document.getElementById('personFilter').addEventListener('change', filterTasks);
        });

        let tasks = <%- JSON.stringify(taskData) %>;

        google.charts.load('current', {'packages': ['gantt']});
        google.charts.setOnLoadCallback(drawChart);

        function daysToMilliseconds(days) {
            return days * 24 * 60 * 60 * 1000;
        }

        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Task ID');
            data.addColumn('string', 'Task Name');
            data.addColumn('string', 'Resource');
            data.addColumn('date', 'Start Date');
            data.addColumn('date', 'End Date');
            data.addColumn('number', 'Duration');
            data.addColumn('number', 'Percent Complete');
            data.addColumn('string', 'Dependencies');

            let insertData = [];

            tasks.forEach(function (row) {
                let startDate = new Date(row.start);
                let endDate = new Date(row.due);

                if (isNaN(startDate.getTime())) {
                    console.error('Invalid start date:', row.start);
                    startDate = new Date();
                }

                if (isNaN(endDate.getTime())) {
                    console.error('Invalid end date:', row.due);
                    endDate = new Date();
                }

                let duration = endDate >= startDate ? (endDate - startDate) / (1000 * 60 * 60 * 24) : 0;
                let rowData = [
                    row.taskID ? row.taskID.toString() : '',
                    row.name || 'Unnamed Task',
                    row.description || 'No Description',
                    startDate,
                    endDate,
                    duration * 24 * 60 * 60 * 1000,
                    0,
                    ''
                ];
                insertData.push(rowData);
            });

            data.addRows(insertData);

            // Calculate dynamic height based on the number of tasks
            let rowHeight = 30;  // Each row is 30 pixels high
            let padding = 50;   // Padding for the chart (timeline, headers, etc.)
            let chartHeight = insertData.length * rowHeight + padding; // Dynamic height calculation

            let containerWidth = document.querySelector('#chart_div').parentElement.offsetWidth * 0.95;

            var options = {
                height: chartHeight,  // Use the dynamically calculated height
                width: containerWidth, // Adjust width to fit the container
                gantt: {
                    trackHeight: rowHeight // Adjust row height
                }
            };

            var chart = new google.visualization.Gantt(document.getElementById('chart_div'));

            chart.draw(data, options);

            google.visualization.events.addListener(chart, 'onmouseover', function() {
                var tooltips = document.querySelectorAll('.google-visualization-tooltip');
                tooltips.forEach(function (tooltip) {
                    tooltip.style.zIndex = '1000';  // Ensure tooltips appear above other elements
                });
            });
        }

        <%taskData.forEach(row => {%>
        {
            const taskID = "<%= row.taskID%>";
            document.getElementById("<%= row.taskID %>_progress_selector").addEventListener('change', function() {
                const selectedValue = this.value;
                const data = { taskID: taskID, progress: selectedValue };
                fetch('/task/update-progress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data) // Send the selected value as JSON
                })
                    .then(response => response.json())
                    .then(result => {
                        console.log('Success:', result);
                        // Reload the page after the server has processed the request
                        location.reload();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        }
        <%});%>
    </script>
</html>